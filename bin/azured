#!/usr/bin/env node

var program = require('commander');
var mkdirp = require('mkdirp');
var fs = require('fs');
var pkg = require('../package.json');
var child_process = require('child_process');
var http = require('http');
var path = require('path');
var readline = require('readline');

var _exit = process.exit;

// Re-assign process.exit because of commander
// TODO: Switch to a different command framework
process.exit = exit

var version = pkg.version;
var xdebug_urls = {
5.4:{x86:"http://xdebug.org/files/php_xdebug-2.4.0rc1-5.4-vc9-nts.dll",x64:"http://xdebug.org/files/php_xdebug-2.4.0rc1-5.4-vc9-nts-x86_64.dll"},
5.5:{x86:"http://xdebug.org/files/php_xdebug-2.4.0rc1-5.5-vc11-nts.dll",x64:"http://xdebug.org/files/php_xdebug-2.4.0rc1-5.5-vc11-nts-x86_64.dll"},
5.6:{x86:"http://xdebug.org/files/php_xdebug-2.4.0rc1-5.6-vc11-nts.dll",x64:"http://xdebug.org/files/php_xdebug-2.4.0rc1-5.6-vc11-nts-x86_64.dll"},
5.7:{x86:"http://xdebug.org/files/php_xdebug-2.4.0rc1-7.0-vc14-nts.dll",x64:"http://xdebug.org/files/php_xdebug-2.4.0rc1-7.0-vc14-nts-x86_64.dll"}
}

program.version(version)
	.option('-c,--cms <CMS>','CMS Type',/^(wordpress|drupal|magento)$/i,'none')
  .option('-t,--xdebug-trigger-on','Set xdebug Trigger')
	.parse(process.argv);

	// console.log(' CMS Type: %j', program.cms);

main();


function main(){
	var php_version = child_process.execSync('php -r "echo phpversion();"',{ encoding: 'utf8' }).substring(0,3);
	var php_arch = child_process.execSync('php -r "echo PHP_INT_SIZE;"',{ encoding: 'utf8' }) == 4 ? "x86" : "x64";
	var destinationPath = program.args.shift() || '.';

if(existsSync(destinationPath+'/.user.ini')){
  confirm('Your app already has a userini file. Do you want to overwrite? [y/N] ', function (ok) {
        if (ok) {
          process.stdin.destroy();
          downloadXdebug(php_version,php_arch,destinationPath);
          startDebug(destinationPath);
        } else {
          console.error('aborting');
          exit(1);
        }
      });
  }else{
    downloadXdebug(php_version,php_arch,destinationPath);
    startDebug(destinationPath);  
 }
}

/**
 * Download xdebug file based on PHP version and arch
 */
function downloadXdebug(php_version,php_arch,path){
	mkdir(path, function(){
		mkdir(path+'/extensions',function(){
			var file = fs.createWriteStream("extensions/xdebug.dll");
			var request = http.get(xdebug_urls[php_version][php_arch], function(response) {
  				response.pipe(file);
			});

    mkdir(path+'/Logging');
    mkdir(path+'/Logging/xdebug_profiles');

		});
	});
}

/**
 * Add extra debugging based on type of CMS
 * TODO : need to add more debugging based on CMS and move createUserIni call out of switch
 */
function startDebug(path){
	switch (program.cms) {
        case 'wordpress':
          createUserIni(path);         
          break;
        case 'drupal':
          createUserIni(path);         
          break;
        case 'magento':
          createUserIni(path);         
          break;
        case 'yii':
          createUserIni(path);         
          break;
        default:
          createUserIni(path);         
      }
}

/**
 * Creates User ini file based on xdebug trigger switch
 */
function createUserIni(path){
  var useriniContent = loadTemplate('userini/default.txt');
  if(program.xdebugTriggerOn){
    useriniContent = loadTemplate('userini/with_xdebug_trigger.txt');
    console.log("creating userini file with xdebug trigger");
  }else{
    useriniContent = loadTemplate('userini/without_xdebug_trigger.txt');
    console.log("creating userini file without xdebug trigger");
  }
  write(path + '/.user.ini', useriniContent);
}

/**
 * Prompt for confirmation on STDOUT/STDIN
 */
function confirm(msg, callback) {
  var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.question(msg, function (input) {
    rl.close();
    callback(/^y|yes|ok|true$/i.test(input));
  });
}

/**
 * Check if a file exist
 */
function existsSync(filePath){
  try{
    fs.statSync(filePath);
  }catch(err){
    if(err.code == 'ENOENT') return false;
  }
  return true;
};


/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str, mode) {
  fs.writeFileSync(path, str, { mode: mode || 0666 });
  console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

/**
 * Load template file.
 */

function loadTemplate(name) {
  return fs.readFileSync(path.join(__dirname, '..', 'templates', name), 'utf-8');
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
  mkdirp(path, 0755, function(err){
    if (err) throw err;
    console.log('   \033[36mcreate\033[0m : ' + path);
    fn && fn();
  });
}


/**
 * Graceful exit for async STDIO
 */

function exit(code) {
  // flush output for Node.js Windows pipe bug
  // https://github.com/joyent/node/issues/6247 is just one bug example
  // https://github.com/visionmedia/mocha/issues/333 has a good discussion
  function done() {
    if (!(draining--)) _exit(code);
  }

  var draining = 0;
  var streams = [process.stdout, process.stderr];

  exit.exited = true;

  streams.forEach(function(stream){
    // submit empty write request and wait for completion
    draining += 1;
    stream.write('', done);
  });

  done();
}
